version: '3.7'

services:
      
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: on-failure
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.admin
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    volumes:
      - ./initial_data/pgadmin/servers.json:/pgadmin4/servers.json:ro
    entrypoint: >
      /bin/sh -c '
      echo "postgres:5432:*:postgres:postgres" > /tmp/pgpass;
      chmod 600 /tmp/pgpass;
      /entrypoint.sh
      '
    ports:
      - "5050:80"
    networks:
      - "gaia-x"
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    user: "${UID}:${GID}"
    container_name: "postgres_merlot"
    hostname: postgres
    image: postgres:15
    restart: on-failure
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      PGDATA: /var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 50
    expose:
      - "5432"
    ports:
      - "5432:5432"
    networks:
      - "gaia-x"
    volumes:
      - ./docker_data/postgres/data:/var/lib/postgresql/data
      - ./initial_data/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro

  neo4j:
    user: "${UID}:${GID}"
    container_name: "neo4j_merlot"
    hostname: neo4j
    image: neo4j:4.4.28
    environment:
      NEO4J_AUTH: "${GRAPH_STORE_USER}/${GRAPH_STORE_PASSWORD}"
      NEO4J_dbms_connector_http_listen__address: :7474
      NEO4J_dbms_connector_bolt_listen__address: :7687
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_security_procedures_unrestricted: gds.*,apoc.*,n10s.*
      NEO4J_dbms_security_procedures_allowlist: gds.*,apoc.*,n10s.*
    healthcheck:
      test: wget http://localhost:7474 || exit 1
      interval: 10s
      timeout: 10s
      retries: 50
      start_period: 3s
    ports:
      - "7474:7474"
      - "7687:7687"
    networks:
      - "gaia-x"
    restart: on-failure
    command: neo4j
    volumes:
      - ./docker_data/neo4j/data:/data
      - ./docker_data/neo4j/logs:/logs
      - ./initial_data/neo4j/plugins/n10s.jar:/plugins/n10s.jar  # kept writable as neo4j must change owner

  server:
    user: "${UID}:${GID}"
    container_name: "fc-server_merlot"
    image: ghcr.io/merlot-education/catalog-shapes/gxfs-catalog:916d293
    environment:
      KEYCLOAK_CREDENTIALS_SECRET: "${FC_CLIENT_SECRET}"
      KEYCLOAK_AUTH-SERVER-URL: "${KEYCLOAK_AUTH_SERVER_URL}"
      KEYCLOAK_REALM: "${KEYCLOAK_REALM}"
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER-URI: "${ISSUER_URI}"
      SPRING_DATASOURCE_URL: "${DB_URL}"
      GRAPHSTORE_URI: "${GRAPH_STORE_URI}"
      GRAPHSTORE_USER: "${GRAPH_STORE_USER}"
      GRAPHSTORE_PASSWORD: "${GRAPH_STORE_PASSWORD}"
      FEDERATEDCATALOGUE_VERIFICATION_PARTICIPANT_TYPE: http://w3id.org/gaia-x/core#Participant
      FEDERATEDCATALOGUE_VERIFICATION_SERVICEOFFERING_TYPE: http://w3id.org/gaia-x/core#ServiceOffering
      FEDERATEDCATALOGUE_VERIFICATION_SIGNATUREVERIFIER: local
      FEDERATEDCATALOGUE_VERIFICATION_TRUSTANCHORURL: ""
      FEDERATEDCATALOGUE_IGNORESSL: true
    network_mode: "host"
    healthcheck:
      test: wget http://localhost:8081/actuator/health || exit 1
      interval: 10s
      timeout: 10s
      retries: 50
      start_period: 3s
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      keycloak:
        condition: service_healthy


  keycloak:
    user: "${UID}:${GID}"
    container_name: "keycloak_merlot"
    environment:
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
      KC_HEALTH_ENABLED: true
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres
    image: "quay.io/keycloak/keycloak:23.0.7"
    ports:
      - "8080:8080"
    networks:
      - "gaia-x"
    restart: on-failure
    healthcheck:
      test: timeout 10s bash -c ':> /dev/tcp/127.0.0.1/8080' || exit 1
      interval: 5s
      timeout: 15s
      retries: 50
      start_period: 3s
    command: >
      start-dev --hostname-strict-https false --hostname-strict false --proxy edge --http-enabled true --import-realm 
      --log-level=DEBUG,io.quarkus:INFO,liquibase:INFO,org.hibernate:INFO,org.infinispan:INFO,org.keycloak.services.scheduled:INFO,org.keycloak.transaction:INFO,io.netty.buffer.PoolThreadCache:INFO,org.keycloak.models.sessions.infinispan:INFO
    volumes:
      - ./initial_data/keycloak/data/import:/opt/keycloak/data/import:ro
    depends_on:
      postgres:
        condition: service_healthy

  rabbitmq:
    user: "${UID}:${GID}"
    container_name: "rabbitmq_merlot"
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: "admin"
      RABBITMQ_DEFAULT_PASS: "admin"
    ports:
      - "9090:15672"
      - "5672:5672"
    networks:
      - "gaia-x"
    restart: on-failure
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 3s
      timeout: 30s
      retries: 50
    volumes:
      - ./docker_data/rabbitmq:/var/lib/rabbitmq

  sd-creation-wizard-api:
    user: "${UID}:${GID}"
    container_name: "sd-creation-wizard-api"
    image: ghcr.io/merlot-education/catalog-shapes/sd-creation-wizard-api:f3867b4
    networks:
      - "gaia-x"
    ports:
      - "8085:8080"

  contract-orchestrator:
    user: "${UID}:${GID}"
    container_name: "contract-orchestrator"
    build:
      context: ../contract-orchestrator
      dockerfile: Dockerfile
      secrets:
        - "GIT_AUTH_TOKEN"
    environment:
      SPRING_DATASOURCE_DRIVERCLASSNAME: org.postgresql.Driver
      SPRING_JPA_DATABASEPLATFORM: org.hibernate.dialect.PostgreSQLDialect
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/contract
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_RABBITMQ_HOST: "localhost"
      ORGANIZATIONSORCHESTRATOR_BASEURI: "http://localhost:8082/api"
      SERVICEOFFERINGORCHESTRATOR_BASEURI: "http://localhost:8084/api"
    network_mode: "host"
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  serviceoffering-orchestrator:
    user: "${UID}:${GID}"
    container_name: "serviceoffering-orchestrator"
    build:
      context: ../serviceoffering-orchestrator
      dockerfile: Dockerfile
      secrets:
        - "GIT_AUTH_TOKEN"
    environment:
      SPRING_DATASOURCE_DRIVERCLASSNAME: org.postgresql.Driver
      SPRING_JPA_DATABASEPLATFORM: org.hibernate.dialect.PostgreSQLDialect
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/serviceoffering
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_RABBITMQ_HOST: "localhost"
      GXFSCATALOG_BASEURI: "http://localhost:8081"
      GXFSWIZARDAPI_BASEURI: "http://localhost:8085"
      ORGANIZATIONSORCHESTRATOR_BASEURI: "http://localhost:8082/api"
      KEYCLOAK_CLIENTSECRET: "${FC_CLIENT_SECRET}"
      GXFSCATALOG_PRIVATEKEYPATH: ""
      GXFSCATALOG_CERTPATH: ""
      GXFSCATALOG_VERIFICATIONMETHOD: "did:web:compliance.lab.gaia-x.eu"
    network_mode: "host"
    depends_on:
      postgres:
        condition: service_healthy
      server:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  organisations-orchestrator:
    user: "${UID}:${GID}"
    container_name: "organisations-orchestrator"
    build:
      context: ../organisations-orchestrator
      dockerfile: Dockerfile
      secrets:
        - "GIT_AUTH_TOKEN"
    environment:
      SPRING_DATASOURCE_DRIVERCLASSNAME: org.postgresql.Driver
      SPRING_JPA_DATABASEPLATFORM: org.hibernate.dialect.PostgreSQLDialect
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/organisations
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      INITDATA_ORGANISATIONS: /opt/initdata/organisations/
      INITDATA_CONNECTORS: /opt/initdata/initial-orga-connectors.json
      SPRING_RABBITMQ_HOST: "localhost"
      GXFSCATALOG_BASEURI: "http://localhost:8081"
      GXFSWIZARDAPI_BASEURI: "http://localhost:8085"
      KEYCLOAK_CLIENTSECRET: "${FC_CLIENT_SECRET}"
      GXFSCATALOG_PRIVATEKEYPATH: ""
      GXFSCATALOG_CERTPATH: ""
      GXFSCATALOG_VERIFICATIONMETHOD: "did:web:compliance.lab.gaia-x.eu"
    depends_on:
      postgres:
        condition: service_healthy
      server:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      did-service:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    network_mode: "host"

  aaam-orchestrator:
    user: "${UID}:${GID}"
    container_name: "aaam-orchestrator"
    build:
      context: ../aaam-orchestrator
      dockerfile: Dockerfile
      secrets:
        - "GIT_AUTH_TOKEN"
    network_mode: "host"
    depends_on:
      keycloak:
        condition: service_healthy

  marketplace:
    user: "${UID}:${GID}"
    container_name: "marketplace"
    build:
      context: ../marketplace
      dockerfile: Dockerfile
      secrets:
        - "GIT_AUTH_TOKEN"
    ports:
      - "4200:80"
    extra_hosts:
      - "didservice-orchestrator.merlot.svc.cluster.local:172.20.0.1"
    networks:
      - "gaia-x"

  did-service:
    user: "${UID}:${GID}"
    container_name: "did-service"
    build:
      context: ../did-service
      dockerfile: Dockerfile
      secrets:
        - "GIT_AUTH_TOKEN"
    environment:
      SPRING_DATASOURCE_DRIVERCLASSNAME: org.postgresql.Driver
      SPRING_JPA_DATABASEPLATFORM: org.hibernate.dialect.PostgreSQLDialect
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/didservice
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    network_mode: "host"
    healthcheck:
      test: wget http://localhost:8088/health || exit 1
      interval: 10s
      timeout: 10s
      retries: 50
      start_period: 3s
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  pdfservice:
    user: "${UID}:${GID}"
    container_name: "pdfservice"
    image: ghcr.io/merlot-education/pdfservice:0.1.1
    networks:
      - "gaia-x"
    ports:
      - "5154:8080"
  
  edc1:
    container_name: "edc1"
    build:
      context: ../merlot-edc
      dockerfile: Dockerfile
      secrets:
        - "GIT_AUTH_TOKEN"
    environment:
      WEB_HTTP_PORT: 29191
      WEB_HTTP_PATH: /api
      WEB_HTTP_MANAGEMENT_PORT: 29193
      WEB_HTTP_MANAGEMENT_PATH: /management
      WEB_HTTP_PROTOCOL_PORT: 29194
      WEB_HTTP_PROTOCOL_PATH: /protocol
      WEB_HTTP_PUBLIC_PORT: 29291
      WEB_HTTP_PUBLIC_PATH: /public
      WEB_HTTP_CONTROL_PORT: 29192
      WEB_HTTP_CONTROL_PATH: /control
      EDC_PARTICIPANT_ID: edc1
      EDC_DSP_CALLBACK_ADDRESS: http://localhost:8123/edc1/protocol
      EDC_API_AUTH_KEY: 1234
    env_file: "secrets/edc_ionos_secrets.txt"
    network_mode: "host"

  edc2:
    container_name: "edc2"
    build:
      context: ../merlot-edc
      dockerfile: Dockerfile
      secrets:
        - "GIT_AUTH_TOKEN"
    environment:
      WEB_HTTP_PORT: 19191
      WEB_HTTP_PATH: /api
      WEB_HTTP_MANAGEMENT_PORT: 19193
      WEB_HTTP_MANAGEMENT_PATH: /management
      WEB_HTTP_PROTOCOL_PORT: 19194
      WEB_HTTP_PROTOCOL_PATH: /protocol
      WEB_HTTP_PUBLIC_PORT: 19291
      WEB_HTTP_PUBLIC_PATH: /public
      WEB_HTTP_CONTROL_PORT: 19192
      WEB_HTTP_CONTROL_PATH: /control
      EDC_PARTICIPANT_ID: edc2
      EDC_DSP_CALLBACK_ADDRESS: http://localhost:8123/edc2/protocol
      EDC_API_AUTH_KEY: 5678
    env_file: "secrets/edc_ionos_secrets.txt"
    network_mode: "host"

  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./initial_data/nginx/reverse_proxy.conf:/etc/nginx/nginx.conf:ro
    network_mode: "host"

  omejdn-server:
    user: "${UID}:${GID}"
    container_name: "omejdn-server"
    image: ghcr.io/merlot-education/omejdn-plugins:0.0.1-f2a0459
    environment:
      OMEJDN_ISSUER: "http://localhost:4567/auth"
      OMEJDN_FRONT_URL: "http://localhost:4567/auth"
      OMEJDN_OPENID: true
      OMEJDN_ENVIRONMENT: "development"
      OMEJDN_ACCEPT_AUDIENCE: idsc:IDS_CONNECTORS_ALL
      OMEJDN_DEFAULT_AUDIENCE: idsc:IDS_CONNECTORS_ALL
      OMEJDN_PLUGINS: plugins_config/plugins.yml
    volumes:
      - ./docker_data/omejdn/config:/opt/config
      - ./initial_data/omejdn/plugins_config/plugins.yml:/opt/plugins_config/plugins.yml:ro
      - ./docker_data/omejdn/keys:/opt/keys
    network_mode: "host"
    restart: on-failure

networks:
  gaia-x:
    driver: "bridge"

secrets:
  GIT_AUTH_TOKEN:
    file: "secrets/git_auth_token.txt"
